{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth)/login/page.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(auth)/login/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(auth)/login/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6R,GAC1T,2DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth)/login/page.tsx/proxy.js"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/app/(auth)/login/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/(auth)/login/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyQ,GACtS,uCACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 115, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/db/schema.ts"],"sourcesContent":["import type { InferSelectModel } from 'drizzle-orm';\nimport {\n  pgTable,\n  varchar,\n  timestamp,\n  json,\n  uuid,\n  text,\n  primaryKey,\n  foreignKey,\n  boolean,\n  serial,\n  integer,\n  jsonb,\n} from 'drizzle-orm/pg-core';\n\nexport const user = pgTable('User', {\n  id: uuid('id').primaryKey().notNull().defaultRandom(),\n  email: varchar('email', { length: 64 }).notNull(),\n  password: varchar('password', { length: 64 }),\n});\n\nexport type User = InferSelectModel<typeof user>;\n\nexport const userProfile = pgTable('user_profile', {\n  id: serial('id').primaryKey(),\n  userId: text('user_id').notNull().unique(),\n  name: text('name').notNull(),\n  gender: text('gender').notNull(),\n  age: integer('age').notNull(),\n  relationshipGoals: text('relationship_goals').notNull(),\n  genderPreference: text('gender_preference').notNull(),\n  career: text('career').notNull(),\n  heightWeight: text('height_weight').notNull(),\n  interests: text('interests').notNull(),\n  education: text('education').notNull(),\n  onboardingCompleted: boolean('onboarding_completed').notNull().default(false),\n  persona: jsonb('persona'),\n  createdAt: timestamp('created_at').notNull().defaultNow(),\n  updatedAt: timestamp('updated_at').notNull().defaultNow(),\n});\n\nexport type UserProfile = InferSelectModel<typeof userProfile>;\n\nexport const chat = pgTable('Chat', {\n  id: uuid('id').primaryKey().notNull().defaultRandom(),\n  createdAt: timestamp('createdAt').notNull(),\n  title: text('title').notNull(),\n  userId: uuid('userId')\n    .notNull()\n    .references(() => user.id),\n  visibility: varchar('visibility', { enum: ['public', 'private'] })\n    .notNull()\n    .default('private'),\n});\n\nexport type Chat = InferSelectModel<typeof chat>;\n\nexport const message = pgTable('Message', {\n  id: uuid('id').primaryKey().notNull().defaultRandom(),\n  chatId: uuid('chatId')\n    .notNull()\n    .references(() => chat.id),\n  role: varchar('role').notNull(),\n  content: json('content').notNull(),\n  createdAt: timestamp('createdAt').notNull(),\n});\n\nexport type Message = InferSelectModel<typeof message>;\n\nexport const vote = pgTable(\n  'Vote',\n  {\n    chatId: uuid('chatId')\n      .notNull()\n      .references(() => chat.id),\n    messageId: uuid('messageId')\n      .notNull()\n      .references(() => message.id),\n    isUpvoted: boolean('isUpvoted').notNull(),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.chatId, table.messageId] }),\n    };\n  },\n);\n\nexport type Vote = InferSelectModel<typeof vote>;\n\nexport const document = pgTable(\n  'Document',\n  {\n    id: uuid('id').notNull().defaultRandom(),\n    createdAt: timestamp('createdAt').notNull(),\n    title: text('title').notNull(),\n    content: text('content'),\n    userId: uuid('userId')\n      .notNull()\n      .references(() => user.id),\n  },\n  (table) => {\n    return {\n      pk: primaryKey({ columns: [table.id, table.createdAt] }),\n    };\n  },\n);\n\nexport type Document = InferSelectModel<typeof document>;\n\nexport const suggestion = pgTable(\n  'Suggestion',\n  {\n    id: uuid('id').notNull().defaultRandom(),\n    documentId: uuid('documentId').notNull(),\n    documentCreatedAt: timestamp('documentCreatedAt').notNull(),\n    originalText: text('originalText').notNull(),\n    suggestedText: text('suggestedText').notNull(),\n    description: text('description'),\n    isResolved: boolean('isResolved').notNull().default(false),\n    userId: uuid('userId')\n      .notNull()\n      .references(() => user.id),\n    createdAt: timestamp('createdAt').notNull(),\n  },\n  (table) => ({\n    pk: primaryKey({ columns: [table.id] }),\n    documentRef: foreignKey({\n      columns: [table.documentId, table.documentCreatedAt],\n      foreignColumns: [document.id, document.createdAt],\n    }),\n  }),\n);\n\nexport type Suggestion = InferSelectModel<typeof suggestion>;\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 239, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/lib/db/queries.ts"],"sourcesContent":["import 'server-only';\n\nimport { genSaltSync, hashSync } from 'bcrypt-ts';\nimport { and, asc, desc, eq, gt, gte } from 'drizzle-orm';\nimport { drizzle } from 'drizzle-orm/postgres-js';\nimport postgres from 'postgres';\n\nimport {\n  user,\n  chat,\n  type User,\n  document,\n  type Suggestion,\n  suggestion,\n  type Message,\n  message,\n  vote,\n} from './schema';\n\n// Optionally, if not using email/pass login, you can\n// use the Drizzle adapter for Auth.js / NextAuth\n// https://authjs.dev/reference/adapter/drizzle\n\n// biome-ignore lint: Forbidden non-null assertion.\nconst client = postgres(process.env.POSTGRES_URL!);\nconst db = drizzle(client);\n\nexport async function getUser(email: string): Promise<Array<User>> {\n  try {\n    return await db.select().from(user).where(eq(user.email, email));\n  } catch (error) {\n    console.error('Failed to get user from database');\n    throw error;\n  }\n}\n\nexport async function createUser(email: string, password: string) {\n  const salt = genSaltSync(10);\n  const hash = hashSync(password, salt);\n\n  try {\n    return await db.insert(user).values({ email, password: hash });\n  } catch (error) {\n    console.error('Failed to create user in database');\n    throw error;\n  }\n}\n\nexport async function saveChat({\n  id,\n  userId,\n  title,\n}: {\n  id: string;\n  userId: string;\n  title: string;\n}) {\n  try {\n    return await db.insert(chat).values({\n      id,\n      createdAt: new Date(),\n      userId,\n      title,\n    });\n  } catch (error) {\n    console.error('Failed to save chat in database');\n    throw error;\n  }\n}\n\nexport async function deleteChatById({ id }: { id: string }) {\n  try {\n    await db.delete(vote).where(eq(vote.chatId, id));\n    await db.delete(message).where(eq(message.chatId, id));\n\n    return await db.delete(chat).where(eq(chat.id, id));\n  } catch (error) {\n    console.error('Failed to delete chat by id from database');\n    throw error;\n  }\n}\n\nexport async function getChatsByUserId({ id }: { id: string }) {\n  try {\n    return await db\n      .select()\n      .from(chat)\n      .where(eq(chat.userId, id))\n      .orderBy(desc(chat.createdAt));\n  } catch (error) {\n    console.error('Failed to get chats by user from database');\n    throw error;\n  }\n}\n\nexport async function getChatById({ id }: { id: string }) {\n  try {\n    const [selectedChat] = await db.select().from(chat).where(eq(chat.id, id));\n    return selectedChat;\n  } catch (error) {\n    console.error('Failed to get chat by id from database');\n    throw error;\n  }\n}\n\nexport async function saveMessages({ messages }: { messages: Array<Message> }) {\n  try {\n    return await db.insert(message).values(messages);\n  } catch (error) {\n    console.error('Failed to save messages in database', error);\n    throw error;\n  }\n}\n\nexport async function getMessagesByChatId({ id }: { id: string }) {\n  try {\n    return await db\n      .select()\n      .from(message)\n      .where(eq(message.chatId, id))\n      .orderBy(asc(message.createdAt));\n  } catch (error) {\n    console.error('Failed to get messages by chat id from database', error);\n    throw error;\n  }\n}\n\nexport async function voteMessage({\n  chatId,\n  messageId,\n  type,\n}: {\n  chatId: string;\n  messageId: string;\n  type: 'up' | 'down';\n}) {\n  try {\n    const [existingVote] = await db\n      .select()\n      .from(vote)\n      .where(and(eq(vote.messageId, messageId)));\n\n    if (existingVote) {\n      return await db\n        .update(vote)\n        .set({ isUpvoted: type === 'up' })\n        .where(and(eq(vote.messageId, messageId), eq(vote.chatId, chatId)));\n    }\n    return await db.insert(vote).values({\n      chatId,\n      messageId,\n      isUpvoted: type === 'up',\n    });\n  } catch (error) {\n    console.error('Failed to upvote message in database', error);\n    throw error;\n  }\n}\n\nexport async function getVotesByChatId({ id }: { id: string }) {\n  try {\n    return await db.select().from(vote).where(eq(vote.chatId, id));\n  } catch (error) {\n    console.error('Failed to get votes by chat id from database', error);\n    throw error;\n  }\n}\n\nexport async function saveDocument({\n  id,\n  title,\n  content,\n  userId,\n}: {\n  id: string;\n  title: string;\n  content: string;\n  userId: string;\n}) {\n  try {\n    return await db.insert(document).values({\n      id,\n      title,\n      content,\n      userId,\n      createdAt: new Date(),\n    });\n  } catch (error) {\n    console.error('Failed to save document in database');\n    throw error;\n  }\n}\n\nexport async function getDocumentsById({ id }: { id: string }) {\n  try {\n    const documents = await db\n      .select()\n      .from(document)\n      .where(eq(document.id, id))\n      .orderBy(asc(document.createdAt));\n\n    return documents;\n  } catch (error) {\n    console.error('Failed to get document by id from database');\n    throw error;\n  }\n}\n\nexport async function getDocumentById({ id }: { id: string }) {\n  try {\n    const [selectedDocument] = await db\n      .select()\n      .from(document)\n      .where(eq(document.id, id))\n      .orderBy(desc(document.createdAt));\n\n    return selectedDocument;\n  } catch (error) {\n    console.error('Failed to get document by id from database');\n    throw error;\n  }\n}\n\nexport async function deleteDocumentsByIdAfterTimestamp({\n  id,\n  timestamp,\n}: {\n  id: string;\n  timestamp: Date;\n}) {\n  try {\n    await db\n      .delete(suggestion)\n      .where(\n        and(\n          eq(suggestion.documentId, id),\n          gt(suggestion.documentCreatedAt, timestamp),\n        ),\n      );\n\n    return await db\n      .delete(document)\n      .where(and(eq(document.id, id), gt(document.createdAt, timestamp)));\n  } catch (error) {\n    console.error(\n      'Failed to delete documents by id after timestamp from database',\n    );\n    throw error;\n  }\n}\n\nexport async function saveSuggestions({\n  suggestions,\n}: {\n  suggestions: Array<Suggestion>;\n}) {\n  try {\n    return await db.insert(suggestion).values(suggestions);\n  } catch (error) {\n    console.error('Failed to save suggestions in database');\n    throw error;\n  }\n}\n\nexport async function getSuggestionsByDocumentId({\n  documentId,\n}: {\n  documentId: string;\n}) {\n  try {\n    return await db\n      .select()\n      .from(suggestion)\n      .where(and(eq(suggestion.documentId, documentId)));\n  } catch (error) {\n    console.error(\n      'Failed to get suggestions by document version from database',\n    );\n    throw error;\n  }\n}\n\nexport async function getMessageById({ id }: { id: string }) {\n  try {\n    return await db.select().from(message).where(eq(message.id, id));\n  } catch (error) {\n    console.error('Failed to get message by id from database');\n    throw error;\n  }\n}\n\nexport async function deleteMessagesByChatIdAfterTimestamp({\n  chatId,\n  timestamp,\n}: {\n  chatId: string;\n  timestamp: Date;\n}) {\n  try {\n    return await db\n      .delete(message)\n      .where(\n        and(eq(message.chatId, chatId), gte(message.createdAt, timestamp)),\n      );\n  } catch (error) {\n    console.error(\n      'Failed to delete messages by id after timestamp from database',\n    );\n    throw error;\n  }\n}\n\nexport async function updateChatVisiblityById({\n  chatId,\n  visibility,\n}: {\n  chatId: string;\n  visibility: 'private' | 'public';\n}) {\n  try {\n    return await db.update(chat).set({ visibility }).where(eq(chat.id, chatId));\n  } catch (error) {\n    console.error('Failed to update chat visibility in database');\n    throw error;\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 471, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 503, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth)/auth.config.ts"],"sourcesContent":["import type { NextAuthConfig } from 'next-auth';\n\nexport const authConfig = {\n  pages: {\n    signIn: '/login',\n    newUser: '/',\n  },\n  providers: [\n    // added later in auth.ts since it requires bcrypt which is only compatible with Node.js\n    // while this file is also used in non-Node.js environments\n  ],\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      const isLoggedIn = !!auth?.user;\n      const isOnChat = nextUrl.pathname.startsWith('/');\n      const isOnRegister = nextUrl.pathname.startsWith('/register');\n      const isOnLogin = nextUrl.pathname.startsWith('/login');\n\n      if (isLoggedIn && (isOnLogin || isOnRegister)) {\n        return Response.redirect(new URL('/', nextUrl as unknown as URL));\n      }\n\n      if (isOnRegister || isOnLogin) {\n        return true; // Always allow access to register and login pages\n      }\n\n      if (isOnChat) {\n        if (isLoggedIn) return true;\n        return false; // Redirect unauthenticated users to login page\n      }\n\n      if (isLoggedIn) {\n        return Response.redirect(new URL('/', nextUrl as unknown as URL));\n      }\n\n      return true;\n    },\n  },\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;QACR,SAAS;IACX;IACA,WAAW,EAGV;IACD,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,MAAM,aAAa,CAAC,CAAC,MAAM;YAC3B,MAAM,WAAW,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAC7C,MAAM,eAAe,QAAQ,QAAQ,CAAC,UAAU,CAAC;YACjD,MAAM,YAAY,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAE9C,IAAI,cAAc,CAAC,aAAa,YAAY,GAAG;gBAC7C,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;YACxC;YAEA,IAAI,gBAAgB,WAAW;gBAC7B,OAAO,MAAM,kDAAkD;YACjE;YAEA,IAAI,UAAU;gBACZ,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D;YAEA,IAAI,YAAY;gBACd,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,KAAK;YACxC;YAEA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 535, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth)/auth.ts"],"sourcesContent":["import { compare } from 'bcrypt-ts';\nimport NextAuth, { type User, type Session } from 'next-auth';\nimport Credentials from 'next-auth/providers/credentials';\n\nimport { getUser } from '@/lib/db/queries';\n\nimport { authConfig } from './auth.config';\n\ninterface ExtendedSession extends Session {\n  user: User;\n}\n\nexport const {\n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n      credentials: {},\n      async authorize({ email, password }: any) {\n        const users = await getUser(email);\n        if (users.length === 0) return null;\n        // biome-ignore lint: Forbidden non-null assertion.\n        const passwordsMatch = await compare(password, users[0].password!);\n        if (!passwordsMatch) return null;\n        return users[0] as any;\n      },\n    }),\n  ],\n  callbacks: {\n    async jwt({ token, user }) {\n      if (user) {\n        token.id = user.id;\n      }\n\n      return token;\n    },\n    async session({\n      session,\n      token,\n    }: {\n      session: ExtendedSession;\n      token: any;\n    }) {\n      if (session.user) {\n        session.user.id = token.id as string;\n      }\n\n      return session;\n    },\n  },\n});\n"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AAEA;AAEA;AALA;AACA;;;;;;AAUO,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,CAAA,GAAA,qJAAA,CAAA,UAAQ,AAAD,EAAE;IACX,GAAG,iIAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAW,AAAD,EAAE;YACV,aAAa,CAAC;YACd,MAAM,WAAU,EAAE,KAAK,EAAE,QAAQ,EAAO;gBACtC,MAAM,QAAQ,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAO,AAAD,EAAE;gBAC5B,IAAI,MAAM,MAAM,KAAK,GAAG,OAAO;gBAC/B,mDAAmD;gBACnD,MAAM,iBAAiB,MAAM,CAAA,GAAA,6IAAA,CAAA,UAAO,AAAD,EAAE,UAAU,KAAK,CAAC,EAAE,CAAC,QAAQ;gBAChE,IAAI,CAAC,gBAAgB,OAAO;gBAC5B,OAAO,KAAK,CAAC,EAAE;YACjB;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE;YACvB,IAAI,MAAM;gBACR,MAAM,EAAE,GAAG,KAAK,EAAE;YACpB;YAEA,OAAO;QACT;QACA,MAAM,SAAQ,EACZ,OAAO,EACP,KAAK,EAIN;YACC,IAAI,QAAQ,IAAI,EAAE;gBAChB,QAAQ,IAAI,CAAC,EAAE,GAAG,MAAM,EAAE;YAC5B;YAEA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 590, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 596, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/app/(auth)/actions.ts"],"sourcesContent":["'use server';\n\nimport { z } from 'zod';\n\nimport { createUser, getUser } from '@/lib/db/queries';\n\nimport { signIn } from './auth';\n\nconst authFormSchema = z.object({\n  email: z.string().email(),\n  password: z.string().min(6),\n});\n\nexport interface LoginActionState {\n  status: 'idle' | 'in_progress' | 'success' | 'failed' | 'invalid_data';\n}\n\nexport const login = async (\n  _: LoginActionState,\n  formData: FormData,\n): Promise<LoginActionState> => {\n  try {\n    const validatedData = authFormSchema.parse({\n      email: formData.get('email'),\n      password: formData.get('password'),\n    });\n\n    await signIn('credentials', {\n      email: validatedData.email,\n      password: validatedData.password,\n      redirect: false,\n    });\n\n    return { status: 'success' };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { status: 'invalid_data' };\n    }\n\n    return { status: 'failed' };\n  }\n};\n\nexport interface RegisterActionState {\n  status:\n    | 'idle'\n    | 'in_progress'\n    | 'success'\n    | 'failed'\n    | 'user_exists'\n    | 'invalid_data';\n}\n\nexport const register = async (\n  _: RegisterActionState,\n  formData: FormData,\n): Promise<RegisterActionState> => {\n  try {\n    const validatedData = authFormSchema.parse({\n      email: formData.get('email'),\n      password: formData.get('password'),\n    });\n\n    const [user] = await getUser(validatedData.email);\n\n    if (user) {\n      return { status: 'user_exists' } as RegisterActionState;\n    }\n    await createUser(validatedData.email, validatedData.password);\n    await signIn('credentials', {\n      email: validatedData.email,\n      password: validatedData.password,\n      redirect: false,\n    });\n\n    return { status: 'success' };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return { status: 'invalid_data' };\n    }\n\n    return { status: 'failed' };\n  }\n};\n"],"names":[],"mappings":";;;;;;AAIA;AAEA;;AAJA;;;;;;AAMA,MAAM,iBAAiB,oIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9B,OAAO,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK;IACvB,UAAU,oIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;AAC3B;AAMO,MAAM,QAAQ,OACnB,GACA;IAEA,IAAI;QACF,MAAM,gBAAgB,eAAe,KAAK,CAAC;YACzC,OAAO,SAAS,GAAG,CAAC;YACpB,UAAU,SAAS,GAAG,CAAC;QACzB;QAEA,MAAM,CAAA,GAAA,uHAAA,CAAA,SAAM,AAAD,EAAE,eAAe;YAC1B,OAAO,cAAc,KAAK;YAC1B,UAAU,cAAc,QAAQ;YAChC,UAAU;QACZ;QAEA,OAAO;YAAE,QAAQ;QAAU;IAC7B,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,oIAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO;gBAAE,QAAQ;YAAe;QAClC;QAEA,OAAO;YAAE,QAAQ;QAAS;IAC5B;AACF;AAYO,MAAM,WAAW,OACtB,GACA;IAEA,IAAI;QACF,MAAM,gBAAgB,eAAe,KAAK,CAAC;YACzC,OAAO,SAAS,GAAG,CAAC;YACpB,UAAU,SAAS,GAAG,CAAC;QACzB;QAEA,MAAM,CAAC,KAAK,GAAG,MAAM,CAAA,GAAA,oHAAA,CAAA,UAAO,AAAD,EAAE,cAAc,KAAK;QAEhD,IAAI,MAAM;YACR,OAAO;gBAAE,QAAQ;YAAc;QACjC;QACA,MAAM,CAAA,GAAA,oHAAA,CAAA,aAAU,AAAD,EAAE,cAAc,KAAK,EAAE,cAAc,QAAQ;QAC5D,MAAM,CAAA,GAAA,uHAAA,CAAA,SAAM,AAAD,EAAE,eAAe;YAC1B,OAAO,cAAc,KAAK;YAC1B,UAAU,cAAc,QAAQ;YAChC,UAAU;QACZ;QAEA,OAAO;YAAE,QAAQ;QAAU;IAC7B,EAAE,OAAO,OAAO;QACd,IAAI,iBAAiB,oIAAA,CAAA,IAAC,CAAC,QAAQ,EAAE;YAC/B,OAAO;gBAAE,QAAQ;YAAe;QAClC;QAEA,OAAO;YAAE,QAAQ;QAAS;IAC5B;AACF;;;IAlEa;IAoCA;;AApCA,+OAAA;AAoCA,+OAAA"}},
    {"offset": {"line": 679, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 685, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 688, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}